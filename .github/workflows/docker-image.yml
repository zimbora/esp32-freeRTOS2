name: CI/CD Workflow

on:
  push:          # Triggers on push events (to any branch)
    branches:
      - '**'     # Matches all branches (you can also use '*' for all branches)
  release:
    types: [created]

jobs:
  docker:
    runs-on: ubuntu-latest
    env:
      BASE_DIR: /root
      PROJECT: esp32-freeRTOS2
      APP: user
      VERSION: 0.0.0
      CONTAINER: deploy-freertos
      CONTAINER-TAG: freertos

    steps:
    - name: Set Project
      run: echo "Using project $PROJECT"

    - name: Get the version
      id: release
      run: echo "::set-output name=tag::${GITHUB_REF#refs/tags/}"
      if: github.event_name == 'release'  # Run only on release events

    - name: Check release tag format
      run: |
        TAG=${{ steps.release.outputs.tag }}
        if [[ $TAG =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "The release tag is in the format *.*.*: $TAG"
          $VERSION = $TAG
        else
          echo "The release tag is not in the expected format: $TAG"
          exit 1
        fi
      if: github.event_name == 'release'  # Run only on release events

    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        path: ./${PROJECT}
        
    - name: Build Docker image
      run: |
        cd ./${PROJECT}
        docker build \
        -f Dockerfile \
        --build-arg BASE_DIR=${BASE_DIR} \
        --build-arg PROJECT=${PROJECT} \
        --build-arg APP=${APP} \
        --build-arg APP_VERSION=${VERSION} \
        -t freertos .

    - name: Run script inside Docker container
      run: |
        docker run --name $CONTAINER $CONTAINER-TAG
        docker cp ${CONTAINER}:${PROJECT}/images/ ./${PROJECT}/images/

    - uses: actions/upload-artifact@v3
      with:
        name: upload images
        path: ./${PROJECT}/images
        
    - name: Update Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./${PROJECT}/images/*
        token: ${{ secrets.GITHUB_TOKEN }}
      if: github.event_name == 'release'  # Run only on release events

    - name: Clean up
      run: |
        docker rm $CONTAINER